回顾:
1.final:最终的、不可改变的
  1)修饰变量:变量不能被改变
  2)修饰方法:方法不能被重写
  3)修饰类:类不能被继承
2.static final:常量
  1)必须声明同时初始化
  2)类名点来访问，不能被改变
  3)大写，多个单词用_分隔
  4)编译器在编译时自动替换为具体的值
3.抽象方法:
  1)abstract
  2)只有方法的定义，没有方法体
4.抽象类:
    abstract，包含抽象方法的类必须是抽象类
    不能被实例化，是需要被继承的，子类:
	  1)重写所有抽象方法---变不完整为完整
	  2)也声明抽象类------不常用
	意义:封装共有的，统一的类型，
	     定义抽象方法，为所有子类提供统一的入口
5.接口:
    标准、规范，引用类型，interface定义，
	只能常量和抽象方法，不能被实例化
	需要被实现的，实现类:必须重写所有抽象方法
	一个类可以实现多个接口，用逗号隔开
	接口继承接口


正课:
1.多态:
  1)意义:
    1.1)同一类型的引用，指向不同的对象时，有不同的实现
	    -------行为的多态: cut()，run()，teach()...
	1.2)同一个对象，被造型为不同的类型时，有不同的功能
	    -------对象的多态: 我，你，水...
  2)向上造型:
    2.1)父类型的引用指向子类的对象
	2.2)能造型成为的类型有: 父类+所实现的接口
	2.3)能点出来什么，看引用的类型
  3)强制类型转换，成功的条件只有如下两种:
    3.1)引用所指向的对象，就是该类型
	3.2)引用所指向的对象，实现了该接口
  4)强转若不符合如上两个条件，则发生ClassCastException类型转换异常
    建议:在强转之前先使用instanceof来判断引用指向的对象是否是该类型
2.成员内部类:-----实际应用率低
  1)类中套类，外面的称为Outer外部类，里面的称为Inner内部类
  2)内部类通常只服务于外部类，对外不具备可见性
  3)内部类对象通常只能在外部类中创建
  4)内部类中可以直接访问外部类的成员(包括私有的)
    在内部类中有个隐式的引用指向了创建它的外部类对象
	  外部类名.this.
3.匿名内部类:
  1)若想创建一个类(子类)的对象，并且对象只需创建一个
    此时该类不必命名，称之为匿名内部类
  2)内部类中访问外部的变量，该变量必须是final的



面向对象三大特征:
1)封装:
  1.1)类:封装的是对象的属性和行为
  1.2)方法:封装的是具体的业务逻辑实现
  1.3)访问控制修饰符:封装的是访问的权限
2)继承:
  2.1)作用:代码的复用
  2.2)父类/基类:共有的属性和行为
      子类/派生类:特有的属性和行为
  2.3)子继承父之后，子具有:父+子
  2.4)传递性、单一继承，多接口实现
3)多态:
  3.1)意义:行为的多态、对象的多态
  3.2)向上造型、强制类型转换、instanceof判断
  3.3)多态的表现形式:
      3.3.1)重写:根据对象来多态
	  3.3.2)重载:根据参数来多态


面向对象课程安排:
第一天:
  1.什么是类?什么是对象?
  2.如何创建类？如何创建对象？如何访问成员？
  3.引用类型之间画等号
  4.null和NullPointerException
第二天:
  1.方法的重载
  2.构造方法
  3.this
  4.引用类型数组
第三天:
  1.内存管理:堆、栈、方法区
  2.继承
  3.super
  4.向上造型
第四天:
  1.方法的重写、重写与重载的区别
  2.package和import
  3.访问控制修饰符
  4.static
  5.final
  6.static final
第五天:
  1.抽象方法
  2.抽象类
  3.接口
第六天:
  1.多态:意义、向上造型、强制类型转换、instanceof
  2.内部类:成员内部类、匿名内部类



设计规则:
1)将所有子类共有的属性和行为，抽象到父类中
2)所有子类行为都一样，设计为普通方法
  所有子类行为不一样，设计为抽象方法
3)将部分子类共有的行为，抽象到接口中
  符合既是也是原则时，使用接口
  接口是对继承单根性的扩展(多继承)
